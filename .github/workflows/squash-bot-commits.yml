name: Squash Bot Commits History

on:
  workflow_dispatch:
    inputs:
      dry_run:
        description: 'Dry run (show what would be done without executing)'
        required: false
        type: boolean
        default: true

permissions:
  contents: write

jobs:
  squash-history:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout repository with full history
      uses: actions/checkout@v4
      with:
        token: ${{ secrets.GITHUB_TOKEN }}
        fetch-depth: 0  # Full history needed

    - name: Configure Git
      run: |
        git config user.name "github-actions[bot]"
        git config user.email "github-actions[bot]@users.noreply.github.com"

    - name: Analyze bot commits
      id: analyze
      run: |
        echo "=== Analyzing repository history ==="

        # Count all commits
        TOTAL_COMMITS=$(git rev-list --count HEAD)
        echo "Total commits: $TOTAL_COMMITS"

        # Count bot commits (by author OR automated message patterns)
        BOT_COMMITS_BY_AUTHOR=$(git log --format="%an" | grep -E "(proxy-scraper-bot|github-actions|actions-user)" | wc -l)

        # Count automated commits by message (precise patterns only)
        BOT_COMMITS_BY_MESSAGE=$(git log --format="%s" | grep -E "^(Re-scrape proxies|Archive traffic for)$" | wc -l)

        # Total bot commits (avoid double counting - some may match both)
        BOT_COMMITS=$(git log --format="%an|%s" | grep -E "(proxy-scraper-bot|github-actions|actions-user)|^[^|]+\|(Re-scrape proxies|Archive traffic for)$" | wc -l)
        echo "Bot commits found: $BOT_COMMITS (by author: $BOT_COMMITS_BY_AUTHOR, by message: $BOT_COMMITS_BY_MESSAGE)"

        # Count human commits (exclude both bot authors AND automated message patterns)
        HUMAN_COMMITS=$(git log --format="%an|%s" | \
          grep -v -E "(proxy-scraper-bot|github-actions|actions-user)" | \
          grep -v -E "^[^|]+\|(Re-scrape proxies|Archive traffic for)$" | \
          wc -l)
        echo "Human commits found: $HUMAN_COMMITS"

        if [ "$HUMAN_COMMITS" -eq 0 ]; then
          echo "WARNING: No human commits found! Cannot squash."
          echo "bot_commits=$BOT_COMMITS" >> $GITHUB_OUTPUT
          echo "human_commits=0" >> $GITHUB_OUTPUT
          exit 0
        fi

        # Find the most recent human commit (exclude bot authors AND automated messages)
        LAST_HUMAN_COMMIT=$(git log --format="%H|%an|%s" | \
          grep -v -E "(proxy-scraper-bot|github-actions|actions-user)" | \
          grep -v -E "^[^|]+\|[^|]+\|(Re-scrape proxies|Archive traffic for)$" | \
          head -1 | cut -d'|' -f1)
        LAST_HUMAN_AUTHOR=$(git log -1 --format="%an" $LAST_HUMAN_COMMIT)
        LAST_HUMAN_DATE=$(git log -1 --format="%ai" $LAST_HUMAN_COMMIT)
        LAST_HUMAN_MSG=$(git log -1 --format="%s" $LAST_HUMAN_COMMIT)

        echo ""
        echo "Most recent human commit:"
        echo "  Hash: $LAST_HUMAN_COMMIT"
        echo "  Author: $LAST_HUMAN_AUTHOR"
        echo "  Date: $LAST_HUMAN_DATE"
        echo "  Message: $LAST_HUMAN_MSG"

        # Export for next steps
        echo "bot_commits=$BOT_COMMITS" >> $GITHUB_OUTPUT
        echo "human_commits=$HUMAN_COMMITS" >> $GITHUB_OUTPUT
        echo "last_human_commit=$LAST_HUMAN_COMMIT" >> $GITHUB_OUTPUT

        # Calculate estimated size reduction
        echo ""
        echo "=== Repository Size ==="
        du -sh .git

    - name: Squash bot commits (dry run)
      if: inputs.dry_run == true
      run: |
        echo "=== DRY RUN MODE ==="
        echo "This is what would happen if dry_run was set to false:"
        echo ""

        if [ "${{ steps.analyze.outputs.human_commits }}" -eq 0 ]; then
          echo "   Cannot squash: No human commits found"
          echo "   The entire history appears to be bot commits."
          echo "   Manual intervention required."
          exit 1
        fi

        if [ "${{ steps.analyze.outputs.bot_commits }}" -lt 10 ]; then
          echo "    Only ${{ steps.analyze.outputs.bot_commits }} bot commits found"
          echo "   Threshold is 10+ commits. No action needed yet."
          exit 0
        fi

        echo "   Would rebuild git history:"
        echo "   - Preserve all ${{ steps.analyze.outputs.human_commits }} human commits"
        echo "   - Remove all ${{ steps.analyze.outputs.bot_commits }} bot commits from history"
        echo "   - Create a single 'Squashed bot data' commit with latest proxy files"
        echo "   - Force push to master branch"
        echo ""
        echo "Expected result:"
        echo "   Before: ${{ steps.analyze.outputs.human_commits }} human + ${{ steps.analyze.outputs.bot_commits }} bot = $(( ${{ steps.analyze.outputs.human_commits }} + ${{ steps.analyze.outputs.bot_commits }} )) total commits"
        echo "   After:  ${{ steps.analyze.outputs.human_commits }} human + 1 squashed bot = $(( ${{ steps.analyze.outputs.human_commits }} + 1 )) total commits"
        echo ""
        echo "To execute this, re-run with dry_run set to false"

    - name: Squash bot commits (execute)
      if: inputs.dry_run == false
      run: |
        echo "=== EXECUTING SQUASH ==="

        if [ "${{ steps.analyze.outputs.human_commits }}" -eq 0 ]; then
          echo "   Cannot squash: No human commits found"
          exit 1
        fi

        if [ "${{ steps.analyze.outputs.bot_commits }}" -lt 10 ]; then
          echo "    Only ${{ steps.analyze.outputs.bot_commits }} bot commits. Threshold is 10+. Skipping."
          exit 0
        fi

        # Step 1: Get list of all human commit hashes BEFORE creating orphan branch
        echo "Step 1: Identifying human commits to preserve..."
        # Get list from master branch (oldest first)
        HUMAN_COMMITS=$(git log master --reverse --format="%H|%an|%s" | \
          grep -v -E "(proxy-scraper-bot|github-actions|actions-user)" | \
          grep -v -E "^[^|]+\|[^|]+\|(Re-scrape proxies|Update Archive traffic data\.yml|auto archive traffic stats|Archive traffic for)$" | \
          cut -d'|' -f1)

        HUMAN_COUNT=$(echo "$HUMAN_COMMITS" | grep -c "^")
        echo "  Found $HUMAN_COUNT human commits to replay"

        # Step 2: Create a new orphan branch
        echo "Step 2: Creating new orphan branch 'new-master'..."
        git checkout --orphan new-master

        # Step 3: Remove all files from staging
        echo "Step 3: Clearing staging area..."
        git rm -rf . --quiet

        # Step 4: Cherry-pick all human commits in chronological order
        echo "Step 4: Replaying human commits in order..."

        COMMIT_COUNT=0
        for COMMIT_HASH in $HUMAN_COMMITS; do
          echo "  Cherry-picking: $COMMIT_HASH"

          # For the first commit, we need to handle it specially since we're on an orphan branch
          if [ $COMMIT_COUNT -eq 0 ]; then
            git checkout $COMMIT_HASH -- . 2>/dev/null || true
            git add -A

            AUTHOR_NAME=$(git log -1 --format="%an" $COMMIT_HASH)
            AUTHOR_EMAIL=$(git log -1 --format="%ae" $COMMIT_HASH)
            AUTHOR_DATE=$(git log -1 --format="%ai" $COMMIT_HASH)
            COMMIT_MSG=$(git log -1 --format="%B" $COMMIT_HASH)

            GIT_AUTHOR_NAME="$AUTHOR_NAME" \
            GIT_AUTHOR_EMAIL="$AUTHOR_EMAIL" \
            GIT_AUTHOR_DATE="$AUTHOR_DATE" \
            git commit -m "$COMMIT_MSG" --allow-empty
          else
            # Try to cherry-pick, if it fails due to conflicts, take their version
            git cherry-pick $COMMIT_HASH 2>/dev/null || {
              echo "    Conflict detected, resolving..."
              git checkout $COMMIT_HASH -- . 2>/dev/null || true
              git add -A
              git cherry-pick --continue --no-edit 2>/dev/null || {
                COMMIT_MSG=$(git log -1 --format="%B" $COMMIT_HASH)
                git commit -m "$COMMIT_MSG" --allow-empty
              }
            }
          fi

          COMMIT_COUNT=$((COMMIT_COUNT + 1))
        done

        echo "  Replayed $COMMIT_COUNT human commits"

        # Step 5: Add all current files from master as a single squashed commit
        echo "Step 5: Adding all current files from master branch..."
        git checkout master -- . 2>/dev/null || true
        git add -A

        if git diff --cached --quiet; then
          echo "  No additional files to commit"
        else
          TIMESTAMP=$(date -u +"%Y-%m-%d %H:%M:%S UTC")
          git commit -m "Squashed bot data - $TIMESTAMP" \
                     -m "This commit contains all bot-generated data from ${{ steps.analyze.outputs.bot_commits }} bot commits." \
                     -m "Includes: proxy lists, traffic statistics, and any other automated data files." \
                     -m "Original bot commit history has been removed to reduce repository size." \
                     --allow-empty
        fi

        # Step 6: Replace master branch
        echo "Step 6: Replacing master branch..."
        git branch -D master
        git branch -m master

        # Step 7: Verify the new history before pushing
        echo "Step 7: Verifying new history..."
        NEW_TOTAL=$(git rev-list --count HEAD)
        NEW_BOT=$(git log --format="%an|%s" | grep -E "(proxy-scraper-bot|github-actions|actions-user)|^[^|]+\|(Re-scrape proxies|Update Archive traffic data\.yml|auto archive traffic stats|Archive traffic for)$" | wc -l)
        NEW_HUMAN=$(git log --format="%an|%s" | \
          grep -v -E "(proxy-scraper-bot|github-actions|actions-user)" | \
          grep -v -E "^[^|]+\|(Re-scrape proxies|Update Archive traffic data\.yml|auto archive traffic stats|Archive traffic for)$" | \
          wc -l)

        echo "  New commit count: $NEW_TOTAL"
        echo "  Bot commits: $NEW_BOT"
        echo "  Human commits: $NEW_HUMAN"

        if [ "$NEW_BOT" -gt 5 ]; then
          echo "   ERROR: New history still contains $NEW_BOT bot commits!"
          echo "   Something went wrong. Aborting push."
          exit 1
        fi

        if [ "$NEW_HUMAN" -ne "${{ steps.analyze.outputs.human_commits }}" ]; then
          echo "   WARNING: Human commit count changed!"
          echo "   Expected: ${{ steps.analyze.outputs.human_commits }}, Got: $NEW_HUMAN"
          echo "   This may indicate cherry-pick failures. Proceeding anyway..."
        fi

        # Step 8: Force push
        echo "Step 8: Force pushing to origin..."
        git push origin master --force

        echo ""
        echo "   Successfully squashed ${{ steps.analyze.outputs.bot_commits }} bot commits!"
        echo "   Preserved ${{ steps.analyze.outputs.human_commits }} human commits"
        echo "   New history has $NEW_TOTAL total commits"
        echo "   Repository history cleaned"

    - name: Summary
      if: always()
      run: |
        echo ""
        echo "=== Summary ==="
        echo "Bot commits found: ${{ steps.analyze.outputs.bot_commits }}"
        echo "Human commits found: ${{ steps.analyze.outputs.human_commits }}"
        echo "Dry run: ${{ inputs.dry_run }}"

        if [ "${{ inputs.dry_run }}" = "true" ]; then
          echo ""
          echo "This was a dry run. No changes were made."
          echo "Review the output above and re-run with dry_run=false to execute."
        else
          echo ""
          echo "Squash operation completed!"
        fi
